#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

// Encrypt plaintext using the affine Caesar cipher
char encrypt(char plaintext, int a, int b) {
    if (isalpha(plaintext)) {
        char result;
        int offset = islower(plaintext) ? 'a' : 'A';
        result = ((a * (plaintext - offset)) + b) % 26;
        return result + offset;
    }
    return plaintext; // If the character is not a letter, return it unchanged
}

// Decrypt ciphertext using the affine Caesar cipher
char decrypt(char ciphertext, int a, int b) {
    if (isalpha(ciphertext)) {
        char result;
        int offset = islower(ciphertext) ? 'a' : 'A';
        result = (((ciphertext - offset) - b + 26) * modInverse(a, 26)) % 26;
        return result + offset;
    }
    return ciphertext; // If the character is not a letter, return it unchanged
}

// Function to calculate the modular multiplicative inverse
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return 1;
}

int main() {
    char plaintext[] = "Hello, World!";
    int a = 5; // Multiplicative key
    int b = 8; // Additive key

    printf("Original plaintext: %s\n", plaintext);

    // Encrypt the plaintext
    printf("Encrypted text: ");
    for (int i = 0; plaintext[i] != '\0'; i++) {
        printf("%c", encrypt(plaintext[i], a, b));
    }
    printf("\n");

    // Decrypt the ciphertext
    printf("Decrypted text: ");
    for (int i = 0; plaintext[i] != '\0'; i++) {
        printf("%c", decrypt(encrypt(plaintext[i], a, b), a, b));
    }
    printf("\n");

    return 0;
}
