#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// English letter frequency table
float english_freq[ALPHABET_SIZE] = {8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
                                     0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056,
                                     2.758, 0.978, 2.360, 0.150, 1.974, 0.074};

// Function to calculate the letter frequency in the given text
void calculateFrequency(char *text, int *frequency) {
    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            frequency[tolower(text[i]) - 'a']++;
        }
    }
}

// Function to decrypt ciphertext using a given shift key
void decrypt(char *ciphertext, int shift, char *plaintext) {
    int length = strlen(ciphertext);
    for (int i = 0; i < length; i++) {
        if (isalpha(ciphertext[i])) {
            char base = islower(ciphertext[i]) ? 'a' : 'A';
            plaintext[i] = ((ciphertext[i] - base - shift + ALPHABET_SIZE) % ALPHABET_SIZE) + base;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[length] = '\0';
}

// Function to calculate the correlation between the observed and expected frequencies
float correlation(int *observed, float *expected) {
    float sum = 0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        sum += observed[i] * expected[i];
    }
    return sum;
}

// Function to perform the letter frequency attack and print possible plaintexts
void frequencyAttack(char *ciphertext, int top_plaintexts) {
    int frequency[ALPHABET_SIZE] = {0};
    int ciphertext_len = strlen(ciphertext);

    // Calculate letter frequency in the ciphertext
    calculateFrequency(ciphertext, frequency);

    // Initialize an array to store the decrypted plaintexts
    char **plaintexts = (char **)malloc(top_plaintexts * sizeof(char *));
    for (int i = 0; i < top_plaintexts; i++) {
        plaintexts[i] = (char *)malloc((ciphertext_len + 1) * sizeof(char));
    }

    // Try all possible shift keys and decrypt the ciphertext
    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        decrypt(ciphertext, shift, plaintexts[shift]);
    }

    // Calculate correlation between observed and expected letter frequencies for each plaintext
    float *correlations = (float *)malloc(ALPHABET_SIZE * sizeof(float));
    for (int i = 0; i < top_plaintexts; i++) {
        calculateFrequency(plaintexts[i], frequency);
        correlations[i] = correlation(frequency, english_freq);
    }

    // Sort plaintexts based on correlation values
    for (int i = 0; i < top_plaintexts - 1; i++) {
        for (int j = i + 1; j < top_plaintexts; j++) {
            if (correlations[i] < correlations[j]) {
                float temp_corr = correlations[i];
                correlations[i] = correlations[j];
                correlations[j] = temp_corr;
                char *temp_plain = plaintexts[i];
                plaintexts[i] = plaintexts[j];
                plaintexts[j] = temp_plain;
            }
        }
    }

    // Print the top possible plaintexts
    printf("Top %d possible plaintexts:\n", top_plaintexts);
    for (int i = 0; i < top_plaintexts; i++) {
        printf("%s (Correlation: %.2f)\n", plaintexts[i], correlations[i]);
    }

    // Free allocated memory
    for (int i = 0; i < top_plaintexts; i++) {
        free(plaintexts[i]);
    }
    free(plaintexts);
    free(correlations);
}

int main() {
    char ciphertext[1000]; // Adjust the size as needed
    int top_plaintexts;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove newline character if present

    printf("Enter the number of top possible plaintexts to display: ");
    scanf("%d", &top_plaintexts);

    frequencyAttack(ciphertext, top_plaintexts);

    return 0;
}
