#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// English letter frequency table
float english_freq[26] = {8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
                          0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056,
                          2.758, 0.978, 2.360, 0.150, 1.974, 0.074};

// Function to calculate the letter frequency in the given text
void calculateFrequency(char *text, int *frequency) {
    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            frequency[tolower(text[i]) - 'a']++;
        }
    }
}

// Function to perform the letter frequency attack and print possible plaintexts
void frequencyAttack(char *ciphertext, int top_plaintexts) {
    int frequency[26] = {0};
    int ciphertext_len = strlen(ciphertext);

    // Calculate letter frequency in the ciphertext
    calculateFrequency(ciphertext, frequency);

    // Find the most likely shift key based on letter frequency
    int max_shift = 0;
    float max_correlation = 0;
    for (int shift = 0; shift < 26; shift++) {
        float correlation = 0;
        for (int i = 0; i < 26; i++) {
            int ciphertext_index = (i + shift) % 26;
            correlation += frequency[ciphertext_index] * english_freq[i];
        }
        if (correlation > max_correlation) {
            max_correlation = correlation;
            max_shift = shift;
        }
    }

    // Decrypt the ciphertext using the most likely shift key
    printf("Top %d possible plaintexts:\n", top_plaintexts);
    for (int i = 0; i < top_plaintexts; i++) {
        printf("Plaintext %d: ", i + 1);
        for (int j = 0; j < ciphertext_len; j++) {
            char decrypted_char = ciphertext[j];
            if (isalpha(decrypted_char)) {
                char base = islower(decrypted_char) ? 'a' : 'A';
                decrypted_char = ((decrypted_char - base - max_shift + 26) % 26) + base;
            }
            printf("%c", decrypted_char);
        }
        printf("\n");
        // Update shift key for next possible plaintext
        max_shift++;
        if (max_shift == 26) {
            max_shift = 0;
        }
    }
}

int main() {
    char ciphertext[1000]; // Adjust the size as needed
    int top_plaintexts;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove newline character if present

    printf("Enter the number of top possible plaintexts to display: ");
    scanf("%d", &top_plaintexts);

    frequencyAttack(ciphertext, top_plaintexts);

    return 0;
}
